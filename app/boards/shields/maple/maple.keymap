/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#define DEFAULT 0
#define SYM_L   1
#define SYM_R   2

&mt {
  flavor = "tap-preferred";
  // tapping_term_ms = <200>;
};

/ {

  behaviors {
    // mod-morphs
    mm_lbrc: mod_morph_shft_rbrc {
      compatible = "zmk,behavior-mod-morph";
      label = "SHFT_LBRC_TO_RBRC";
      #binding-cells = <0>;
      bindings = <&kp LBRC>, <&kp RBRC>;
      mods = <(MOD_LSFT|MOD_RSFT)>;
    };
    mm_lpar: mod_morph_shft_rpar {
      compatible = "zmk,behavior-mod-morph";
      label = "SHFT_LPAR_TO_RPAR";
      #binding-cells = <0>;
      bindings = <&kp LPAR>, <&kp RPAR>;
      mods = <(MOD_LSFT|MOD_RSFT)>;
    };
    mm_lbkt: mod_morph_shft_rbkt {
      compatible = "zmk,behavior-mod-morph";
      label = "SHFT_LBKT_TO_RBKT";
      #binding-cells = <0>;
      bindings = <&kp LBKT>, <&kp RBKT>;
      mods = <(MOD_LSFT|MOD_RSFT)>;
    };
    mm_bspc: mod_morph_shft_del {
      compatible = "zmk,behavior-mod-morph";
      label = "SHFT_BSPC_TO_DEL";
      #binding-cells = <0>;
      bindings = <&kp BSPC>, <&kp DEL>;
      mods = <(MOD_LSFT|MOD_RSFT)>;
      masked_mods = <(MOD_LSFT)>;
    };
  };

  //          key-positions
  //  0  1  2  3  4    5  6  7  8  9
  // 10 11 12 13 14   15 16 17 18 19
  // 20 21 22 23 24   25 26 27 28 29
  //          30 31   32 33

  combos {
    compatible = "zmk,combos";
    combo_tab {
      timeout-ms = <50>;
      key-positions = <0 1>;
      bindings = <&kp TAB>;
    };
    combo_esc {
      timeout-ms = <50>;
      key-positions = <10 11>;
      bindings = <&kp ESC>;
    };
    combo_up {
      timeout-ms = <50>;
      key-positions = <7 8>;
      bindings = <&kp UP>;
    };
    combo_right {
      timeout-ms = <50>;
      key-positions = <18 19>;
      bindings = <&kp RIGHT>;
    };
    combo_down {
      timeout-ms = <50>;
      key-positions = <17 18>;
      bindings = <&kp DOWN>;
    };
    combo_left {
      timeout-ms = <50>;
      key-positions = <16 17>;
      bindings = <&kp LEFT>;
    };
    combo_bspc {
      timeout-ms = <50>;
      key-positions = <8 9>;
      bindings = <&mm_bspc>;
    };
  };

  keymap {
    compatible = "zmk,keymap";

    default_layer {
      bindings = <
        &kp Q       &kp W        &kp E       &kp R           &kp T              &kp Y          &kp U       &kp I          &kp O          &kp P
        &mt LSFT A  &mt LCTRL S  &mt LALT D  &mt LCMD F      &kp G              &kp H          &mt RCMD J  &mt LALT K     &mt RCTRL L    &mt RSFT SEMI
        &mt LSFT Z  &mt LCTRL X  &mt LALT C  &mt LCMD V      &kp B              &kp N          &mt RCMD M  &mt LALT CMMA  &mt RCTRL DOT  &mt RSFT FSLH
                                             &mt LCMD SPACE  &lt SYM_L TAB      &lt SYM_R RET  &kp SPACE
      >;
    };

    sym_l_layer {
      bindings = <
        &trans    &trans  &trans    &trans     &trans         &trans     &kp N7  &kp N8  &kp N9  &trans
        &kp EXCL  &kp AT  &kp HASH  &kp DLLR   &kp PRCNT      &trans     &kp N4  &kp N5  &kp N6  &trans
        &trans    &trans  &trans    &kp GRAVE  &kp TILDE      &trans     &kp N1  &kp N2  &kp N3  &trans
                                    &trans     &trans         &kp MINUS  &kp N0
      >;
    };

    sym_r_layer {
      bindings = <
        &bt BT_CLR    &trans  &trans    &trans    &trans         &kp PLUS   &kp UNDER  &trans    &mm_lbrc  &kp BSLH
        &trans        &trans  &trans    &trans    &trans         &kp CARET  &kp AMPS   &kp STAR  &mm_lpar  &kp APOS
        &trans        &trans  &trans    &trans    &trans         &kp MINUS  &kp EQUAL  &kp PIPE  &mm_lbkt  &kp BSLH
                                        &trans    &trans         &trans     &trans
      >;
    };

    tri_layer {
      bindings = <
        &trans    &trans  &trans    &trans    &trans         &trans     &trans  &trans  &trans  &trans
        &trans    &trans  &trans    &trans    &trans         &trans     &trans  &trans  &trans  &trans
        &trans    &trans  &trans    &trans    &trans         &trans     &trans  &trans  &trans  &trans
                                    &trans    &trans         &trans     &trans
      >;
    };
  };
};
